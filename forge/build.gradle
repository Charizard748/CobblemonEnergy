plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "cobblemonenergy.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}
repositories {
    maven{
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }

        // Put repositories for dependencies here
        // ForgeGradle automatically adds the Forge maven and Maven Central for you

        // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    flatDir {
        dir 'libs'
    }

}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"
    mappings(loom.officialMojangMappings())

    modImplementation "com.cobblemon:forge:1.5.2+1.20.1"
    //Needed for cobblemon
    implementation ("thedarkcolour:kotlinforforge:4.11.0") //{exclude group: "net.minecraftforge.fancymodloader", module:"loader"}
    //implementation "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"
    //implementation "blank:Mekanism-1.20.1-10.4.10.66"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.0"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
